
模版1
const int N = 1e5+1;
#define lowbit(x) ((x)&(-x))
int tree[N];
修改
void add(int x, int k) {
  while (x <= n) {  // 不能越界
    c[x] = c[x] + k;
    x = x + lowbit(x);
  }
}

查询：// a[1]..a[x]的和
int getsum(int x) {  
  int ans = 0;
  while (x > 0) {
    ans = ans + c[x];
    x = x - lowbit(x);
  }
  return ans;
}



模版2
template <typename T>
struct Fenwick {
    int n;
    std::vector<T> a;
    
    Fenwick(int n_ = 0) {
        init(n_);
    }
    
    void init(int n_) {
        n = n_;
        a.assign(n, T{});
    }
    
    void add(int x, const T &v) {
        for (int i = x + 1; i <= n; i += i & -i) {
            a[i - 1] = a[i - 1] + v;
        }
    }
    
    T sum(int x) {
        T ans{};
        for (int i = x; i > 0; i -= i & -i) {
            ans = ans + a[i - 1];
        }
        return ans;
    }
    
    T rangeSum(int l, int r) {
        return sum(r) - sum(l);
    }
    
    int select(const T &k) {
        int x = 0;
        T cur{};
        for (int i = 1 << std::__lg(n); i; i /= 2) {
            if (x + i <= n && cur + a[x + i - 1] <= k) {
                x += i;
                cur = cur + a[x - 1];
            }
        }
        return x;
    }
};

void solve() {
    Fenwick<int> a(2 * n);
    ans += fen.sum(f[i]);
    fen.add(f[i], 1);
    std::cout << ans << "\n";
}

逆序对核心：
for (int i = n; i >= 0; i--) {
        
            ans += sum(f[i]);
            add(f[i], 1);
}

离散化

方法2（结构体法）:

这个写的太老了
#include<iostream>
#include<algorithm>
#include<cmath>
#include "vector"
#include "map"
#define ll long long
using namespace std;
const int N = 500010;
int tree[N],rnk[N];
int n;
struct node
{
    int num,val;
}a[N];
bool cmp(node x,node y){
    if(x.val == y.val) return x.num < y.num;
    return x.val < y.val;
}
#define lowbit(x) ((x)&(-x)) 
void update(int x,int d){
    while(x <= N){
        tree[x] += d;
        x += lowbit(x);
    }
}
int sum(int x){
    int ans = 0;
    while(x > 0){
        ans += tree[x];
        x   -= lowbit(x);
    }
    return ans;
}
int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cin >> n;
    for(int i = 1;i<=n;i++){
        cin >> a[i].val;
        a[i].num = i;
    }
    sort(a+1,a+1+n,cmp);
    for(int i = 1;i<=n;i++) rnk[a[i].num] = i;
    //记录位置
    ll ans = 0;
    for(int i =n;i>0;i--){
        update(rnk[i],1);
        ans+=sum(rnk[i]);
    }
    cout<<ans;
    return 0;
}


方法1（推荐）:
for (int i = 0; i < n; i++) {
        std::cin >> a[i];
        v.push_back(b[i]);
}
    std::sort(v.begin(), v.end());
    for (int i = 0; i < n; i++) {
        a[i] = std::lower_bound(v.begin(), v.end(), a[i]) - v.begin();
        //找出a[i]的位置
}

详细标准步骤：

1.创建原数组的副本。

2.将副本中的值从小到大排序。

3.将排序好的副本去重。

4.查找原数组的每一个元素在副本中的位置，位置即为排名，将其作为离散化后的值。
// std::vector<int> arr;
std::vector<int> tmp(arr);  // tmp 是 arr 的一个副本
也就是说tmp = arr
std::sort(tmp.begin(), tmp.end());
tmp.erase(std::unique(tmp.begin(), tmp.end()), tmp.end());
for (int i = 0; i < n; ++i)
  arr[i] = std::lower_bound(tmp.begin(), tmp.end(), arr[i]) - tmp.begin();